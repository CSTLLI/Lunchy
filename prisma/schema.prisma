generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  userRoleId    Int?
  Order         Order[]
  UserRole      UserRole? @relation(fields: [userRoleId], references: [id])

  @@map("users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("verification_requests")
}

model UserRole {
  id    Int    @id @default(autoincrement())
  label String
  users User[]
}

model Meal {
  id                 Int                  @id @default(autoincrement())
  label              String
  price              Float
  amountAvailable    Int?
  description        String?
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  IngredientsOnMeals IngredientsOnMeals[]
  ProductsOrdered    ProductsOrdered[]
}

model CategoryProduct {
  id    Int    @id @default(autoincrement())
  label String
}

model Ingredient {
  id                 Int                  @id @default(autoincrement())
  label              String
  weight             Float?
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  meals              IngredientsOnMeals[]
  stockOfIngredients StockOfIngredients?
}

model IngredientsOnMeals {
  ingredient_id Int
  meal_id       Int
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  ingredient    Ingredient @relation(fields: [ingredient_id], references: [id])
  meal          Meal       @relation(fields: [meal_id], references: [id])

  @@id([ingredient_id, meal_id])
}

model StockOfIngredients {
  ingredient_id Int        @id
  amount        Int
  ingredient    Ingredient @relation(fields: [ingredient_id], references: [id])
}

model Order {
  id         Int               @id @default(autoincrement())
  status     Int
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
  user_id    Int
  user       User              @relation(fields: [user_id], references: [id])
  products   ProductsOrdered[]
}

model ProductsOrdered {
  order_id   Int
  product_id Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  order      Order    @relation(fields: [order_id], references: [id])
  product    Meal     @relation(fields: [product_id], references: [id])

  @@id([order_id, product_id])
}
