generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "mysql"
	url      = env("DATABASE_URL")
}

model Account {
	id                 Int       @id @default(autoincrement())
	compoundId         String    @unique @map(name: "compound_id")
	userId             Int       @map(name: "user_id")
	providerType       String    @map(name: "provider_type")
	providerId         String    @map(name: "provider_id")
	providerAccountId  String    @map(name: "provider_account_id")
	refreshToken       String?   @map(name: "refresh_token")
	accessToken        String?   @map(name: "access_token")
	accessTokenExpires DateTime? @map(name: "access_token_expires")
	createdAt          DateTime  @default(now()) @map(name: "created_at")
	updatedAt          DateTime  @default(now()) @map(name: "updated_at")

	@@index([providerAccountId], name: "providerAccountId")
	@@index([providerId], name: "providerId")
	@@index([userId], name: "userId")
	@@map(name: "accounts")
}

model Session {
	id           Int      @id @default(autoincrement())
	userId       Int      @map(name: "user_id")
	expires      DateTime
	sessionToken String   @unique @map(name: "session_token")
	accessToken  String   @unique @map(name: "access_token")
	createdAt    DateTime @default(now()) @map(name: "created_at")
	updatedAt    DateTime @default(now()) @map(name: "updated_at")

	@@map(name: "sessions")
}

model User {
	id            Int       @id @default(autoincrement())
	name          String?
	email         String?   @unique
	emailVerified DateTime? @map(name: "email_verified")
	image         String?
	createdAt     DateTime  @default(now()) @map(name: "created_at")
	updatedAt     DateTime  @default(now()) @map(name: "updated_at")
	UserRole      UserRole? @relation(fields: [userRoleId], references: [id])
	userRoleId    Int?
	Order         Order[]

	@@map(name: "users")
}

model VerificationRequest {
	id         Int      @id @default(autoincrement())
	identifier String
	token      String   @unique
	expires    DateTime
	createdAt  DateTime @default(now()) @map(name: "created_at")
	updatedAt  DateTime @default(now()) @map(name: "updated_at")

	@@map(name: "verification_requests")
}

model UserRole {
	id    Int    @id @default(autoincrement())
	label String

	users User[]
}

model Product {
	id              Int     @id @default(autoincrement())
	label           String
	price           Float
	amountAvailable Int?
	description     String?

	created_at DateTime @default(now())
	updated_at DateTime @updatedAt

	ProductsOrdered ProductsOrdered[]
}

model CategoryProduct {
	id    Int    @id @default(autoincrement())
	label String
}

model Order {
	id         Int      @id @default(autoincrement())
	status     Int
	created_at DateTime @default(now())
	updated_at DateTime @updatedAt
	user_id    Int

	user     User              @relation(fields: [user_id], references: [id])
	products ProductsOrdered[]
}

model ProductsOrdered {
	order_id   Int
	product_id Int
	created_at DateTime @default(now())
	updated_at DateTime @updatedAt

	order   Order   @relation(fields: [order_id], references: [id])
	product Product @relation(fields: [product_id], references: [id])

	@@id([order_id, product_id])
}
